// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int       @id @default(autoincrement()) 
  created_at      DateTime  @default(now())
  updated_at      DateTime  @default(now()) @updatedAt
  deleted_at      DateTime?
  status          Boolean   @default(true)
  name            String
  email           String    @unique
  password        String
  manager         User?     @relation("ManagerRelation", fields: [managerId], references: [id])
  managerId       Int?      @unique // Müdür ID (Opsiyonel)
  subordinates    User?     @relation("ManagerRelation")
  role            Role      @default(user)
  isEmailVerified Boolean   @default(false)
  Token           Token[]
  monitor         Monitor[]
}

model Monitor {
  id                 Int        @id @default(autoincrement())
  createdAt          DateTime   @default(now())
  monitorType        MonitorType
  name               String?
  httpMonitor        HttpMonitor?  
  pingMonitor        PingMonitor?  
  keyWordMonitor     KeyWordMonitor? 
  portMonitor        PortMonitor?
  cronJobMonitor     CronJobMonitor?  
  interval           Int        @default(5)
  intervalUnit       String     @default("minutes")
  reportTime         DateTime?
  status             Status     @default(uncertain)
  serverOwner        User       @relation(fields: [userId], references: [id])
  userId             Int
  logs               Log[]
  maintanance        Maintanance? 
  isActiveByOwner    Boolean    @default(true)
  isProcess          Boolean    @default(false)
  controlTime        DateTime   
  notifications      Notification?
  failCount          Int?        @default(3)
  failCountRef       Int?        @default(3)
  monitorProcessLocation   ProcessLocation?  @default(database)   
}

model HttpMonitor {
  id                 Int        @id 
  host               String
  method             MethodType     
  body               Json?
  headers            Json?
  allowedStatusCodes String[]   @default([])
  timeOut            Int        @default(30)
  userId             Int   
  monitor            Monitor?    @relation(fields: [id], references: [id], onDelete: Cascade)
  @@unique([userId, host, method])
}

model PingMonitor {
  id   Int   @id
  host       String
  userId     Int
  monitor    Monitor?    @relation(fields: [id], references: [id], onDelete: Cascade)
  @@unique([userId, host])
}

model PortMonitor {
  id   Int   @id 
  host   String
  port Int
  timeOut    Int  @default(30)
  userId   Int 
  monitor    Monitor?    @relation(fields: [id], references: [id], onDelete: Cascade)
  @@unique([userId,host,port])
}

model KeyWordMonitor {
  id                 Int        @id 
  host               String
  method             MethodType     
  body               Json?
  headers            Json?
  allowedStatusCodes String[]    @default([])
  keyWord            String
  keyWordType        KeyWordType?
  timeOut            Int        @default(30)
  userId             Int
  monitor            Monitor?    @relation(fields: [id], references: [id], onDelete: Cascade)
  @@unique([userId, host, method])
}

model CronJobMonitor {
  id   Int @id
  host String
  token String
  lastRequestTime DateTime?
  devitionTime Int
  userId  Int
  monitor  Monitor?    @relation(fields: [id], references: [id], onDelete: Cascade)
}

model Notification {
  id Int          @id @default(autoincrement())
  emails Email[]
  monitor Monitor @relation(fields: [monitorId], references: [id])
  monitorId Int   @unique
}

model Email {
  id                Int           @id @default(autoincrement())
  notificationId    Int
  notification      Notification  @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  email String
}

model Maintanance {
  id          Int     @id
  startTime   DateTime
  endTime     DateTime
  controlTime DateTime
  timeZone    String?    @default("Europe/Istanbul")
  status      Boolean
  inActiveTime Boolean? @default(false)
  monitor     Monitor @relation(fields: [id], references: [id], onDelete: Cascade)
}

model Log {
  id           Int      @id @default(autoincrement())
  monitorId    Int
  monitor      Monitor  @relation(fields: [monitorId], references: [id], onDelete: Cascade)
  status       String
  responseTime Int
  isError      Boolean
  createdAt    DateTime @default(now())
}

model Token {
  id          Int       @id @default(autoincrement())
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now()) @updatedAt
  token       String
  type        TokenType
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id     Int
  expired_at  DateTime
  blacklisted Boolean   @default(false)
}

enum Role {
  user
  admin
}

enum TokenType {
  access
  refresh
  resetPassword
  verifyEmail
}

enum MethodType {
  GET
  POST
  PUT
  PATCH
  DELETE
  HEAD
  OPTIONS
}

enum Status {
  up
  down
  uncertain
  maintanance
}

enum MonitorType {
  HttpMonitor
  PingMonitor
  PortMonitor
  KeywordMonitor
  CronJobMonitor
}

enum KeyWordType {
  txt
  html
  json
}

enum ProcessLocation {
  database
  mainQueue
  httpQueue
  pingQueue
  portQueue
  keywordQueue
  cronjobQueue
  maintananceQueue
}