// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int       @id @default(autoincrement())
  created_at      DateTime  @default(now())
  updated_at      DateTime  @default(now()) @updatedAt
  deleted_at      DateTime?
  status          Boolean   @default(true)
  name            String
  email           String    @unique
  password        String
  manager         User?     @relation("ManagerRelation", fields: [managerId], references: [id])
  managerId       Int?      @unique // Müdür ID (Opsiyonel)
  subordinates    User?     @relation("ManagerRelation")
  role            Role      @default(user)
  isEmailVerified Boolean   @default(false)
  Token           Token[]
  monitor         Monitor[]
}

model Monitor {
  id                 Int        @id @default(autoincrement())
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @default(now()) @updatedAt
  deletedAt          DateTime?
  name               String?
  method             MethodType
  host               String     
  body               Json?
  headers            Json?
  interval           Int        @default(5)
  intervalUnit       String     @default("minutes")
  reportTime         Int        @default(1)
  reportTimeUnit     String     @default("weeks")
  status             Status     @default(uncertain)
  serverOwner        User       @relation(fields: [userId], references: [id])
  userId             Int
  logs               Log[]
  maintanance        Maintanance? 
  isActiveByOwner    Boolean    @default(true)
  allowedStatusCodes String[]   @default(["200"])
  isProcess          Boolean    @default(false)

  @@unique([userId, host])
}

model Maintanance {
  id Int @id @default(autoincrement())
  startTime DateTime
  endTime   DateTime
  status Boolean
  monitor Monitor @relation(fields: [monitorId], references: [id])
  monitorId Int @unique
}

model Log {
  id           Int      @id @default(autoincrement())
  monitorId    Int
  monitor      Monitor  @relation(fields: [monitorId], references: [id], onDelete: Cascade)
  statusCode   Int
  responseTime Int
  isError      Boolean
  createdAt    DateTime @default(now())
}

model Token {
  id          Int       @id @default(autoincrement())
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now()) @updatedAt
  token       String
  type        TokenType
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id     Int
  expired_at  DateTime
  blacklisted Boolean   @default(false)
}

enum Role {
  user
  admin
}

enum TokenType {
  access
  refresh
  resetPassword
  verifyEmail
}

enum MethodType {
  GET
  POST
  PUT
  PATCH
  DELETE
  HEAD
  OPTIONS
}

enum Status {
  up
  down
  uncertain
  maintanance
}
